<?php
	/**
	 * QSelectMenuGen File
	 * 
	 * The abstract QSelectMenuGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QSelectMenuBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QSelectMenu class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * Triggered when the selected item has changed. Not every
	 * 		<a><code>select</code></a> event will fire a <code>change</code>
	 * 		event.<ul><li><strong>event</strong> Type: <a>Event</a> </li>
	 * 		<li><strong>ui</strong> Type: <a>Object</a>  <ul><li><strong>item</strong>
	 * 		Type: <a>jQuery</a> The active item.</li></ul></li></ul>
	 */
	class QSelectMenu_ChangeEvent extends QJqUiEvent {
		const EventName = 'selectmenuchange';
	}
	/**
	 * Triggered when the menu is hidden.<ul><li><strong>event</strong> Type:
	 * 		<a>Event</a> </li></ul><p><em>Note: The <code>ui</code> object is empty but
	 * 		included for consistency with other events.</em></p>
	 */
	class QSelectMenu_CloseEvent extends QJqUiEvent {
		const EventName = 'selectmenuclose';
	}
	/**
	 * Triggered when the selectmenu is created.<ul><li><strong>event</strong>
	 * 		Type: <a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a>
	 * 		</li></ul><p><em>Note: The <code>ui</code> object is empty but included for
	 * 		consistency with other events.</em></p>
	 */
	class QSelectMenu_CreateEvent extends QJqUiEvent {
		const EventName = 'selectmenucreate';
	}
	/**
	 * Triggered when an items gains focus.<ul><li><strong>event</strong> Type:
	 * 		<a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a> 
	 * 		<ul><li><strong>item</strong> Type: <a>jQuery</a> The focused
	 * 		item.</li></ul></li></ul>
	 */
	class QSelectMenu_FocusEvent extends QJqUiEvent {
		const EventName = 'selectmenufocus';
	}
	/**
	 * Triggered when the menu is opened.<ul><li><strong>event</strong> Type:
	 * 		<a>Event</a> </li></ul><p><em>Note: The <code>ui</code> object is empty but
	 * 		included for consistency with other events.</em></p>
	 */
	class QSelectMenu_OpenEvent extends QJqUiEvent {
		const EventName = 'selectmenuopen';
	}
	/**
	 * Triggered when a menu item is selected.<ul><li><strong>event</strong> Type:
	 * 		<a>Event</a> </li> <li><strong>ui</strong> Type: <a>Object</a> 
	 * 		<ul><li><strong>item</strong> Type: <a>jQuery</a> The selected
	 * 		item.</li></ul></li></ul>
	 */
	class QSelectMenu_SelectEvent extends QJqUiEvent {
		const EventName = 'selectmenuselect';
	}

	/* Custom "property" event classes for this control */

	/**
	 * Generated QSelectMenuGen class.
	 * 
	 * This is the QSelectMenuGen class which is automatically generated
	 * by scraping the JQuery UI documentation website. As such, it includes all the options
	 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
	 * the QSelectMenuBase class for any glue code to make this class more
	 * usable in QCubed.
	 * 
	 * @see QSelectMenuBase
	 * @package Controls\Base
	 * @property mixed $AppendTo Which element to append the menu to. When the value is <code>null</code>,
	 * 		the parents of the <code>&lt;select&gt;</code> are checked for a class name
	 * 		of <code>ui-front</code>. If an element with the <code>ui-front</code>
	 * 		class name is found, the menu is appended to that element. Regardless of
	 * 		the value, if no element is found, the menu is appended to the body.
	 * @property boolean $Disabled Disables the selectmenu if set to <code>true</code>.
	 * @property mixed $Icons Icons to use for the button, matching <a>an icon defined by the jQuery UI
	 * 		CSS Framework</a>. 				<ul><li>button (string, default:
	 * 		&quot;ui-icon-triangle-1-s&quot;)</li></ul>
	 * @property mixed $Position Identifies the position of the menu in relation to the associated button
	 * 		element. You can refer to the <a>jQuery UI Position</a> utility for more
	 * 		details about the various options.
	 * @property integer $Width The width of the menu, in pixels. When the value is <code>null</code>, the
	 * 		width of the native select is used.
	 */

	class QSelectMenuGen extends QListBox	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var mixed */
		protected $mixAppendTo = null;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var mixed */
		protected $mixIcons = null;
		/** @var mixed */
		protected $mixPosition = null;
		/** @var integer */
		protected $intWidth = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('AppendTo', 'appendTo');
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Icons', 'icons');
			$strJqOptions .= $this->makeJsProperty('Position', 'position');
			$strJqOptions .= $this->makeJsProperty('Width', 'width');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'selectmenu';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			$str .= $this->GetControlJavaScript();
			if ($strParentScript = parent::GetEndScript()) {
				$str .= '; ' . $strParentScript;
			}
			return $str;
		}
		
		/**
		 * Call a JQuery UI Method on the object. 
		 * 
		 * A helper function to call a jQuery UI Method. Takes variable number of arguments.
		 *
		 * @param boolean $blnAttribute true if the method is modifying an option, false if executing a command
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($blnAttribute, $strMethodName /*, ... */) {
			$args = func_get_args();
			array_shift ($args);

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			if ($blnAttribute) {
				$this->AddAttributeScript($strJs);
			} else {
				QApplication::ExecuteJavaScript($strJs);
			}
		}


		/**
		 * Closes the menu.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function Close() {
			$this->CallJqUiMethod(false, "close");
		}
		/**
		 * Removes the selectmenu functionality completely. This will return the
		 * element back to its pre-init state.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod(false, "destroy");
		}
		/**
		 * Disables the selectmenu.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function Disable() {
			$this->CallJqUiMethod(false, "disable");
		}
		/**
		 * Enables the selectmenu.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function Enable() {
			$this->CallJqUiMethod(false, "enable");
		}
		/**
		 * <p>Retrieves the selectmenu&apos;s instance object. If the element does not
		 * have an associated instance, <code>undefined</code> is returned.</p> 
		 * 		<p>Unlike other widget methods, <code>instance()</code> is safe to call
		 * on any element after the selectmenu plugin has loaded.</p><ul><li>This
		 * method does not accept any arguments.</li></ul>
		 */
		public function Instance() {
			$this->CallJqUiMethod(false, "instance");
		}
		/**
		 * Returns a <code>jQuery</code> object containing the menu
		 * element.<ul><li>This method does not accept any arguments.</li></ul>
		 */
		public function MenuWidget() {
			$this->CallJqUiMethod(false, "menuWidget");
		}
		/**
		 * Opens the menu.<ul><li>This method does not accept any arguments.</li></ul>
		 */
		public function Open() {
			$this->CallJqUiMethod(false, "open");
		}
		/**
		 * <p>Gets the value currently associated with the specified
		 * <code>optionName</code>.</p> 			<p><strong>Note:</strong> For options that
		 * have objects as their value, you can get the value of a specific key by
		 * using dot notation. For example, <code>&quot;foo.bar&quot;</code> would get
		 * the value of the <code>bar</code> property on the <code>foo</code>
		 * option.</p><ul><li><strong>optionName</strong> Type: <a>String</a> The name
		 * of the option to get.</li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod(false, "option", $optionName);
		}
		/**
		 * Gets an object containing key/value pairs representing the current
		 * selectmenu options hash.<ul><li>This signature does not accept any
		 * arguments.</li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod(false, "option");
		}
		/**
		 * <p>Sets the value of the selectmenu option associated with the specified
		 * <code>optionName</code>.</p> 			<p><strong>Note:</strong> For options that
		 * have objects as their value, you can set the value of just one property by
		 * using dot notation for <code>optionName</code>. For example,
		 * <code>&quot;foo.bar&quot;</code> would update only the <code>bar</code>
		 * property of the <code>foo</code>
		 * option.</p><ul><li><strong>optionName</strong> Type: <a>String</a> The name
		 * of the option to set.</li> <li><strong>value</strong> Type: <a>Object</a> A
		 * value to set for the option.</li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod(false, "option", $optionName, $value);
		}
		/**
		 * Sets one or more options for the
		 * selectmenu.<ul><li><strong>options</strong> Type: <a>Object</a> A map of
		 * option-value pairs to set.</li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod(false, "option", $options);
		}
		/**
		 * Parses the original element and re-renders the menu. Processes any
		 * <code>&lt;option&gt;</code> or <code>&lt;optgroup&gt;</code> elements that
		 * were added, removed or disabled.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function Refresh() {
			$this->CallJqUiMethod(false, "refresh");
		}


		public function __get($strName) {
			switch ($strName) {
				case 'AppendTo': return $this->mixAppendTo;
				case 'Disabled': return $this->blnDisabled;
				case 'Icons': return $this->mixIcons;
				case 'Position': return $this->mixPosition;
				case 'Width': return $this->intWidth;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'AppendTo':
					$this->mixAppendTo = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'appendTo', $mixValue);
					}
					break;

				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Icons':
					$this->mixIcons = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'icons', $mixValue);
					}
					break;

				case 'Position':
					$this->mixPosition = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'position', $mixValue);
					}
					break;

				case 'Width':
					try {
						$this->intWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'width', $this->intWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}

		/**
		* If this control is attachable to a codegenerated control in a metacontrol, this function will be
		* used by the metacontrol designer dialog to display a list of options for the control.
		* @return QMetaParam[]
		**/
		public static function GetMetaParams() {
			return array_merge(parent::GetMetaParams(), array(
				new QMetaParam (get_called_class(), 'Disabled', 'Disables the selectmenu if set to <code>true</code>.', QType::Boolean),
				new QMetaParam (get_called_class(), 'Width', 'The width of the menu, in pixels. When the value is <code>null</code>, the width of the native select is used.', QType::Integer),
			));
		}
	}

?>
