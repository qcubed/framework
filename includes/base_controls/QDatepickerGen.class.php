<?php
	/**
	 * QDatepickerGen File
	 * 
	 * The abstract QDatepickerGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QDatepickerBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QDatepicker class file.
	 *
	 */

	/* Custom event classes for this control */
	
	

	/* Custom "property" event classes for this control */
	/**
	 * <strong>Default:</strong><code>null</code>A function that takes an input
	 * 		field and current datepicker instance and returns an options object to
	 * 		update the datepicker with. It is called just before the datepicker is
	 * 		displayed.
	 */
	class QDatepicker_BeforeShowEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepicker_BeforeShow';
		protected $strJqProperty = 'beforeShow';
	}

	/**
	 * <strong>Default:</strong><code>null</code>A function that takes a date as a
	 * 		parameter and must return an array with: 				<ul><li><code>[0]</code>:
	 * 		<code>true</code>/<code>false</code> indicating whether or not this date is
	 * 		selectable</li> 					<li><code>[1]</code>: a CSS class name to add to the
	 * 		date&apos;s cell or <code>&quot;&quot;</code> for the default
	 * 		presentation</li> 					<li><code>[2]</code>: an optional popup tooltip for
	 * 		this date</li></ul> 				The function is called for each day in the
	 * 		datepicker before it is displayed.
	 */
	class QDatepicker_BeforeShowDayEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepicker_BeforeShowDay';
		protected $strJqProperty = 'beforeShowDay';
	}

	/**
	 * <strong>Default:</strong><code>jQuery.datepicker.iso8601Week</code>A
	 * 		function to calculate the week of the year for a given date. The default
	 * 		implementation uses the ISO 8601 definition: weeks start on a Monday; the
	 * 		first week of the year contains the first Thursday of the year.
	 */
	class QDatepicker_CalculateWeekEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepicker_CalculateWeek';
		protected $strJqProperty = 'calculateWeek';
	}

	/**
	 * <strong>Default:</strong><code>null</code>Called when the datepicker moves
	 * 		to a new month and/or year. The function receives the selected year, month
	 * 		(1-12), and the datepicker instance as parameters. <code>this</code> refers
	 * 		to the associated input field.
	 */
	class QDatepicker_ChangeMonthYearEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepicker_ChangeMonthYear';
		protected $strJqProperty = 'onChangeMonthYear';
	}

	/**
	 * <strong>Default:</strong><code>null</code>Called when the datepicker is
	 * 		closed, whether or not a date is selected. The function receives the
	 * 		selected date as text (<code>&quot;&quot;</code> if none) and the
	 * 		datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.
	 */
	class QDatepicker_CloseEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepicker_Close';
		protected $strJqProperty = 'onClose';
	}

	/**
	 * <strong>Default:</strong><code>null</code>Called when the datepicker is
	 * 		selected. The function receives the selected date as text and the
	 * 		datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.
	 */
	class QDatepicker_SelectEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepicker_Select';
		protected $strJqProperty = 'onSelect';
	}


	/**
	 * Generated QDatepickerGen class.
	 * 
	 * This is the QDatepickerGen class which is automatically generated
	 * by scraping the JQuery UI documentation website. As such, it includes all the options
	 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
	 * the QDatepickerBase class for any glue code to make this class more
	 * usable in QCubed.
	 * 
	 * @see QDatepickerBase
	 * @package Controls\Base
	 * @property mixed $AltField An input element that is to be updated with the selected date from the
	 * 		datepicker. Use the <a><code>altFormat</code></a> option to change the
	 * 		format of the date within this field. Leave as blank for no alternate
	 * 		field.
	 * @property string $AltFormat The <a><code>dateFormat</code></a> to be used for the
	 * 		<a><code>altField</code></a> option. This allows one date format to be
	 * 		shown to the user for selection purposes, while a different format is
	 * 		actually sent behind the scenes. For a full list of the possible formats
	 * 		see the <a><code>formatDate</code></a> function
	 * @property string $AppendText The text to display after each date field, e.g., to show the required
	 * 		format.
	 * @property boolean $AutoSize Set to <code>true</code> to automatically resize the input field to
	 * 		accommodate dates in the current <a><code>dateFormat</code></a>.
	 * @property QJsClosure $OnBeforeShow <strong>Default:</strong><code>null</code>A function that takes an input
	 * 		field and current datepicker instance and returns an options object to
	 * 		update the datepicker with. It is called just before the datepicker is
	 * 		displayed.
	 * @property QJsClosure $OnBeforeShowDay <strong>Default:</strong><code>null</code>A function that takes a date as a
	 * 		parameter and must return an array with: 				<ul><li><code>[0]</code>:
	 * 		<code>true</code>/<code>false</code> indicating whether or not this date is
	 * 		selectable</li> 					<li><code>[1]</code>: a CSS class name to add to the
	 * 		date&apos;s cell or <code>&quot;&quot;</code> for the default
	 * 		presentation</li> 					<li><code>[2]</code>: an optional popup tooltip for
	 * 		this date</li></ul> 				The function is called for each day in the
	 * 		datepicker before it is displayed.
	 * @property string $ButtonImage A URL of an image to use to display the datepicker when the
	 * 		<a><code>showOn</code></a> option is set to <code>&quot;button&quot;</code>
	 * 		or <code>&quot;both&quot;</code>. If set, the
	 * 		<a><code>buttonText</code></a> option becomes the <code>alt</code> value
	 * 		and is not directly displayed.
	 * @property boolean $ButtonImageOnly Whether the button image should be rendered by itself instead of inside a
	 * 		button element. This option is only relevant if the
	 * 		<a><code>buttonImage</code></a> option has also been set.
	 * @property string $ButtonText The text to display on the trigger button. Use in conjunction with the
	 * 		<a><code>showOn</code></a> option set to <code>&quot;button&quot;</code> or
	 * 		<code>&quot;both&quot;</code>.
	 * @property QJsClosure $OnCalculateWeek <strong>Default:</strong><code>jQuery.datepicker.iso8601Week</code>A
	 * 		function to calculate the week of the year for a given date. The default
	 * 		implementation uses the ISO 8601 definition: weeks start on a Monday; the
	 * 		first week of the year contains the first Thursday of the year.
	 * @property boolean $ChangeMonth Whether the month should be rendered as a dropdown instead of text.
	 * @property boolean $ChangeYear Whether the year should be rendered as a dropdown instead of text. Use the
	 * 		<a><code>yearRange</code></a> option to control which years are made
	 * 		available for selection.
	 * @property string $CloseText The text to display for the close link. Use the
	 * 		<a><code>showButtonPanel</code></a> option to display this button.
	 * @property boolean $ConstrainInput When <code>true</code>, entry in the input field is constrained to those
	 * 		characters allowed by the current <a><code>dateFormat</code></a> option.
	 * @property string $CurrentText The text to display for the current day link. Use the
	 * 		<a><code>showButtonPanel</code></a> option to display this button.
	 * @property string $JqDateFormat The format for parsed and displayed dates. For a full list of the possible
	 * 		formats see the <code><a><code>formatDate</code></a></code> function.
	 * @property array $DayNames The list of long day names, starting from Sunday, for use as requested via
	 * 		the <a><code>dateFormat</code></a> option.
	 * @property array $DayNamesMin The list of minimised day names, starting from Sunday, for use as column
	 * 		headers within the datepicker.
	 * @property array $DayNamesShort The list of abbreviated day names, starting from Sunday, for use as
	 * 		requested via the <a><code>dateFormat</code></a> option.
	 * @property mixed $DefaultDate Set the date to highlight on first opening if the field is blank. Specify
	 * 		either an actual date via a Date object or as a string in the current
	 * 		<a><code>dateFormat</code></a>, or a number of days from today (e.g. +7) or
	 * 		a string of values and periods (&apos;y&apos; for years, &apos;m&apos; for
	 * 		months, &apos;w&apos; for weeks, &apos;d&apos; for days, e.g. &apos;+1m
	 * 		+7d&apos;), or null for today.<strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Date</strong>: A date object containing
	 * 		the default date.</li> <li><strong>Number</strong>: A number of days from
	 * 		today. For example <code>2</code> represents two days from today and
	 * 		<code>-1</code> represents yesterday.</li> <li><strong>String</strong>: A
	 * 		string in the format defined by the <a><code>dateFormat</code></a> option,
	 * 		or a relative date. Relative dates must contain value and period pairs;
	 * 		valid periods are <code>&quot;y&quot;</code> for years,
	 * 		<code>&quot;m&quot;</code> for months, <code>&quot;w&quot;</code> for
	 * 		weeks, and <code>&quot;d&quot;</code> for days. For example,
	 * 		<code>&quot;+1m +7d&quot;</code> represents one month and seven days from
	 * 		today.</li></ul>
	 * @property mixed $Duration Control the speed at which the datepicker appears, it may be a time in
	 * 		milliseconds or a string representing one of the three predefined speeds
	 * 		(&quot;slow&quot;, &quot;normal&quot;, &quot;fast&quot;).
	 * @property integer $FirstDay Set the first day of the week: Sunday is <code>0</code>, Monday is
	 * 		<code>1</code>, etc.
	 * @property boolean $GotoCurrent When <code>true</code>, the current day link moves to the currently
	 * 		selected date instead of today.
	 * @property boolean $HideIfNoPrevNext Normally the previous and next links are disabled when not applicable (see
	 * 		the <a><code>minDate</code></a> and <a><code>maxDate</code></a> options).
	 * 		You can hide them altogether by setting this attribute to
	 * 		<code>true</code>.
	 * @property boolean $IsRTL Whether the current language is drawn from right to left.
	 * @property mixed $MaxDate The maximum selectable date. When set to <code>null</code>, there is no
	 * 		maximum.<strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Date</strong>: A date object containing
	 * 		the maximum date.</li> <li><strong>Number</strong>: A number of days from
	 * 		today. For example <code>2</code> represents two days from today and
	 * 		<code>-1</code> represents yesterday.</li> <li><strong>String</strong>: A
	 * 		string in the format defined by the <a><code>dateFormat</code></a> option,
	 * 		or a relative date. Relative dates must contain value and period pairs;
	 * 		valid periods are <code>&quot;y&quot;</code> for years,
	 * 		<code>&quot;m&quot;</code> for months, <code>&quot;w&quot;</code> for
	 * 		weeks, and <code>&quot;d&quot;</code> for days. For example,
	 * 		<code>&quot;+1m +7d&quot;</code> represents one month and seven days from
	 * 		today.</li></ul>
	 * @property mixed $MinDate The minimum selectable date. When set to <code>null</code>, there is no
	 * 		minimum.<strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Date</strong>: A date object containing
	 * 		the minimum date.</li> <li><strong>Number</strong>: A number of days from
	 * 		today. For example <code>2</code> represents two days from today and
	 * 		<code>-1</code> represents yesterday.</li> <li><strong>String</strong>: A
	 * 		string in the format defined by the <a><code>dateFormat</code></a> option,
	 * 		or a relative date. Relative dates must contain value and period pairs;
	 * 		valid periods are <code>&quot;y&quot;</code> for years,
	 * 		<code>&quot;m&quot;</code> for months, <code>&quot;w&quot;</code> for
	 * 		weeks, and <code>&quot;d&quot;</code> for days. For example,
	 * 		<code>&quot;+1m +7d&quot;</code> represents one month and seven days from
	 * 		today.</li></ul>
	 * @property array $MonthNames The list of full month names, for use as requested via the
	 * 		<a><code>dateFormat</code></a> option.
	 * @property array $MonthNamesShort The list of abbreviated month names, as used in the month header on each
	 * 		datepicker and as requested via the <a><code>dateFormat</code></a> option.
	 * @property boolean $NavigationAsDateFormat Whether the <a><code>prevText</code></a> and <a><code>nextText</code></a>
	 * 		options should be parsed as dates by the
	 * 		<code><a><code>formatDate</code></a></code> function, allowing them to
	 * 		display the target month names for example.
	 * @property string $NextText The text to display for the next month link. With the standard ThemeRoller
	 * 		styling, this value is replaced by an icon.
	 * @property mixed $NumberOfMonths The number of months to show at once.<strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Number</strong>: The number of months to
	 * 		display in a single row.</li> <li><strong>Array</strong>: An array defining
	 * 		the number of rows and columns to display.</li></ul>
	 * @property QJsClosure $OnChangeMonthYear <strong>Default:</strong><code>null</code>Called when the datepicker moves
	 * 		to a new month and/or year. The function receives the selected year, month
	 * 		(1-12), and the datepicker instance as parameters. <code>this</code> refers
	 * 		to the associated input field.
	 * @property QJsClosure $OnClose <strong>Default:</strong><code>null</code>Called when the datepicker is
	 * 		closed, whether or not a date is selected. The function receives the
	 * 		selected date as text (<code>&quot;&quot;</code> if none) and the
	 * 		datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.
	 * @property QJsClosure $OnSelect <strong>Default:</strong><code>null</code>Called when the datepicker is
	 * 		selected. The function receives the selected date as text and the
	 * 		datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.
	 * @property string $PrevText The text to display for the previous month link. With the standard
	 * 		ThemeRoller styling, this value is replaced by an icon.
	 * @property boolean $SelectOtherMonths Whether days in other months shown before or after the current month are
	 * 		selectable. This only applies if the <a><code>showOtherMonths</code></a>
	 * 		option is set to <code>true</code>.
	 * @property mixed $ShortYearCutoff The cutoff year for determining the century for a date (used in conjunction
	 * 		with <a><code>dateFormat</code></a> &apos;y&apos;). Any dates entered with
	 * 		a year value less than or equal to the cutoff year are considered to be in
	 * 		the current century, while those greater than it are deemed to be in the
	 * 		previous century.<strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Number</strong>: A value between
	 * 		<code>0</code> and <code>99</code> indicating the cutoff year.</li>
	 * 		<li><strong>String</strong>: A relative number of years from the current
	 * 		year, e.g., <code>&quot;+3&quot;</code> or
	 * 		<code>&quot;-5&quot;</code>.</li></ul>
	 * @property string $ShowAnim The name of the animation used to show and hide the datepicker. Use
	 * 		<code>&quot;show&quot;</code> (the default),
	 * 		<code>&quot;slideDown&quot;</code>, <code>&quot;fadeIn&quot;</code>, any of
	 * 		the <a>jQuery UI effects</a>. Set to an empty string to disable animation.
	 * @property boolean $ShowButtonPanel Whether to display a button pane underneath the calendar. The button pane
	 * 		contains two buttons, a Today button that links to the current day, and a
	 * 		Done button that closes the datepicker. The buttons&apos; text can be
	 * 		customized using the <a><code>currentText</code></a> and
	 * 		<a><code>closeText</code></a> options respectively.
	 * @property integer $ShowCurrentAtPos When displaying multiple months via the <a><code>numberOfMonths</code></a>
	 * 		option, the <code>showCurrentAtPos</code> option defines which position to
	 * 		display the current month in.
	 * @property boolean $ShowMonthAfterYear Whether to show the month after the year in the header.
	 * @property string $ShowOn When the datepicker should appear. The datepicker can appear when the field
	 * 		receives focus (<code>&quot;focus&quot;</code>), when a button is clicked
	 * 		(<code>&quot;button&quot;</code>), or when either event occurs
	 * 		(<code>&quot;both&quot;</code>).
	 * @property mixed $ShowOptions If using one of the jQuery UI effects for the <a><code>showAnim</code></a>
	 * 		option, you can provide additional settings for that animation via this
	 * 		option.
	 * @property boolean $ShowOtherMonths Whether to display dates in other months (non-selectable) at the start or
	 * 		end of the current month. To make these days selectable use the
	 * 		<a><code>selectOtherMonths</code></a> option.
	 * @property boolean $ShowWeek When <code>true</code>, a column is added to show the week of the year. The
	 * 		<a><code>calculateWeek</code></a> option determines how the week of the
	 * 		year is calculated. You may also want to change the
	 * 		<a><code>firstDay</code></a> option.
	 * @property integer $StepMonths Set how many months to move when clicking the previous/next links.
	 * @property string $WeekHeader The text to display for the week of the year column heading. Use the
	 * 		<a><code>showWeek</code></a> option to display this column.
	 * @property string $YearRange The range of years displayed in the year drop-down: either relative to
	 * 		today&apos;s year (<code>&quot;-nn:+nn&quot;</code>), relative to the
	 * 		currently selected year (<code>&quot;c-nn:c+nn&quot;</code>), absolute
	 * 		(<code>&quot;nnnn:nnnn&quot;</code>), or combinations of these formats
	 * 		(<code>&quot;nnnn:-nn&quot;</code>). Note that this option only affects
	 * 		what appears in the drop-down, to restrict which dates may be selected use
	 * 		the <a><code>minDate</code></a> and/or <a><code>maxDate</code></a> options.
	 * @property string $YearSuffix Additional text to display after the year in the month headers.
	 */

	class QDatepickerGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var mixed */
		protected $mixAltField = null;
		/** @var string */
		protected $strAltFormat = null;
		/** @var string */
		protected $strAppendText = null;
		/** @var boolean */
		protected $blnAutoSize = null;
		/** @var QJsClosure */
		protected $mixOnBeforeShow = null;
		/** @var QJsClosure */
		protected $mixOnBeforeShowDay = null;
		/** @var string */
		protected $strButtonImage = null;
		/** @var boolean */
		protected $blnButtonImageOnly = null;
		/** @var string */
		protected $strButtonText = null;
		/** @var QJsClosure */
		protected $mixOnCalculateWeek = null;
		/** @var boolean */
		protected $blnChangeMonth = null;
		/** @var boolean */
		protected $blnChangeYear = null;
		/** @var string */
		protected $strCloseText = null;
		/** @var boolean */
		protected $blnConstrainInput = null;
		/** @var string */
		protected $strCurrentText = null;
		/** @var string */
		protected $strJqDateFormat = null;
		/** @var array */
		protected $arrDayNames = null;
		/** @var array */
		protected $arrDayNamesMin = null;
		/** @var array */
		protected $arrDayNamesShort = null;
		/** @var mixed */
		protected $mixDefaultDate = null;
		/** @var mixed */
		protected $mixDuration = null;
		/** @var integer */
		protected $intFirstDay;
		/** @var boolean */
		protected $blnGotoCurrent = null;
		/** @var boolean */
		protected $blnHideIfNoPrevNext = null;
		/** @var boolean */
		protected $blnIsRTL = null;
		/** @var mixed */
		protected $mixMaxDate = null;
		/** @var mixed */
		protected $mixMinDate = null;
		/** @var array */
		protected $arrMonthNames = null;
		/** @var array */
		protected $arrMonthNamesShort = null;
		/** @var boolean */
		protected $blnNavigationAsDateFormat = null;
		/** @var string */
		protected $strNextText = null;
		/** @var mixed */
		protected $mixNumberOfMonths = null;
		/** @var QJsClosure */
		protected $mixOnChangeMonthYear = null;
		/** @var QJsClosure */
		protected $mixOnClose = null;
		/** @var QJsClosure */
		protected $mixOnSelect = null;
		/** @var string */
		protected $strPrevText = null;
		/** @var boolean */
		protected $blnSelectOtherMonths = null;
		/** @var mixed */
		protected $mixShortYearCutoff = null;
		/** @var string */
		protected $strShowAnim = null;
		/** @var boolean */
		protected $blnShowButtonPanel = null;
		/** @var integer */
		protected $intShowCurrentAtPos;
		/** @var boolean */
		protected $blnShowMonthAfterYear = null;
		/** @var string */
		protected $strShowOn = null;
		/** @var mixed */
		protected $mixShowOptions = null;
		/** @var boolean */
		protected $blnShowOtherMonths = null;
		/** @var boolean */
		protected $blnShowWeek = null;
		/** @var integer */
		protected $intStepMonths = null;
		/** @var string */
		protected $strWeekHeader = null;
		/** @var string */
		protected $strYearRange = null;
		/** @var string */
		protected $strYearSuffix = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('AltField', 'altField');
			$strJqOptions .= $this->makeJsProperty('AltFormat', 'altFormat');
			$strJqOptions .= $this->makeJsProperty('AppendText', 'appendText');
			$strJqOptions .= $this->makeJsProperty('AutoSize', 'autoSize');
			$strJqOptions .= $this->makeJsProperty('OnBeforeShow', 'beforeShow');
			$strJqOptions .= $this->makeJsProperty('OnBeforeShowDay', 'beforeShowDay');
			$strJqOptions .= $this->makeJsProperty('ButtonImage', 'buttonImage');
			$strJqOptions .= $this->makeJsProperty('ButtonImageOnly', 'buttonImageOnly');
			$strJqOptions .= $this->makeJsProperty('ButtonText', 'buttonText');
			$strJqOptions .= $this->makeJsProperty('OnCalculateWeek', 'calculateWeek');
			$strJqOptions .= $this->makeJsProperty('ChangeMonth', 'changeMonth');
			$strJqOptions .= $this->makeJsProperty('ChangeYear', 'changeYear');
			$strJqOptions .= $this->makeJsProperty('CloseText', 'closeText');
			$strJqOptions .= $this->makeJsProperty('ConstrainInput', 'constrainInput');
			$strJqOptions .= $this->makeJsProperty('CurrentText', 'currentText');
			$strJqOptions .= $this->makeJsProperty('JqDateFormat', 'dateFormat');
			$strJqOptions .= $this->makeJsProperty('DayNames', 'dayNames');
			$strJqOptions .= $this->makeJsProperty('DayNamesMin', 'dayNamesMin');
			$strJqOptions .= $this->makeJsProperty('DayNamesShort', 'dayNamesShort');
			$strJqOptions .= $this->makeJsProperty('DefaultDate', 'defaultDate');
			$strJqOptions .= $this->makeJsProperty('Duration', 'duration');
			$strJqOptions .= $this->makeJsProperty('FirstDay', 'firstDay');
			$strJqOptions .= $this->makeJsProperty('GotoCurrent', 'gotoCurrent');
			$strJqOptions .= $this->makeJsProperty('HideIfNoPrevNext', 'hideIfNoPrevNext');
			$strJqOptions .= $this->makeJsProperty('IsRTL', 'isRTL');
			$strJqOptions .= $this->makeJsProperty('MaxDate', 'maxDate');
			$strJqOptions .= $this->makeJsProperty('MinDate', 'minDate');
			$strJqOptions .= $this->makeJsProperty('MonthNames', 'monthNames');
			$strJqOptions .= $this->makeJsProperty('MonthNamesShort', 'monthNamesShort');
			$strJqOptions .= $this->makeJsProperty('NavigationAsDateFormat', 'navigationAsDateFormat');
			$strJqOptions .= $this->makeJsProperty('NextText', 'nextText');
			$strJqOptions .= $this->makeJsProperty('NumberOfMonths', 'numberOfMonths');
			$strJqOptions .= $this->makeJsProperty('OnChangeMonthYear', 'onChangeMonthYear');
			$strJqOptions .= $this->makeJsProperty('OnClose', 'onClose');
			$strJqOptions .= $this->makeJsProperty('OnSelect', 'onSelect');
			$strJqOptions .= $this->makeJsProperty('PrevText', 'prevText');
			$strJqOptions .= $this->makeJsProperty('SelectOtherMonths', 'selectOtherMonths');
			$strJqOptions .= $this->makeJsProperty('ShortYearCutoff', 'shortYearCutoff');
			$strJqOptions .= $this->makeJsProperty('ShowAnim', 'showAnim');
			$strJqOptions .= $this->makeJsProperty('ShowButtonPanel', 'showButtonPanel');
			$strJqOptions .= $this->makeJsProperty('ShowCurrentAtPos', 'showCurrentAtPos');
			$strJqOptions .= $this->makeJsProperty('ShowMonthAfterYear', 'showMonthAfterYear');
			$strJqOptions .= $this->makeJsProperty('ShowOn', 'showOn');
			$strJqOptions .= $this->makeJsProperty('ShowOptions', 'showOptions');
			$strJqOptions .= $this->makeJsProperty('ShowOtherMonths', 'showOtherMonths');
			$strJqOptions .= $this->makeJsProperty('ShowWeek', 'showWeek');
			$strJqOptions .= $this->makeJsProperty('StepMonths', 'stepMonths');
			$strJqOptions .= $this->makeJsProperty('WeekHeader', 'weekHeader');
			$strJqOptions .= $this->makeJsProperty('YearRange', 'yearRange');
			$strJqOptions .= $this->makeJsProperty('YearSuffix', 'yearSuffix');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'datepicker';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		/**
		 * Returns all Javscript that needs to be executed after rendering of this control
		 *
		 * @return string The JS to be executed
		 */
		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			$str .= $this->GetControlJavaScript();
			if ($strParentScript = parent::GetEndScript()) {
				$str .= '; ' . $strParentScript;
			}
			return $str;
		}
		
		/**
		 * Call a JQuery UI Method on the object. 
		 * 
		 * A helper function to call a jQuery UI Method. Takes variable number of arguments.
		 *
		 * @param boolean $blnAttribute true if the method is modifying an option, false if executing a command
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($blnAttribute, $strMethodName /*, ... */) {
			$args = func_get_args();
			array_shift ($args);

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			if ($blnAttribute) {
				$this->AddAttributeScript($strJs);
			} else {
				QApplication::ExecuteJavaScript($strJs);
			}
		}


		/**
		 * Removes the datepicker functionality completely. This will return the
		 * element back to its pre-init state.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod(false, "destroy");
		}
		/**
		 * Opens the datepicker in a dialog box.<ul><li><strong>date</strong> Type:
		 * <a>String</a> or <a>Date</a> The initial date.</li>
		 * <li><strong>onSelect</strong> Type: <a>Function</a>() A callback function
		 * when a date is selected. The function receives the date text and date
		 * picker instance as parameters.</li> <li><strong>settings</strong> Type:
		 * <a>Options</a> The new settings for the date picker.</li>
		 * <li><strong>pos</strong> Type: <a>Number[2] or MouseEvent</a> The position
		 * of the top/left of the dialog as <code>[x, y]</code> or a
		 * <code>MouseEvent</code> that contains the coordinates. If not specified the
		 * dialog is centered on the screen.</li></ul>
		 * @param $date
		 * @param $onSelect
		 * @param $settings
		 * @param $pos
		 */
		public function Dialog($date, $onSelect = null, $settings = null, $pos = null) {
			$this->CallJqUiMethod(false, "dialog", $date, $onSelect, $settings, $pos);
		}
		/**
		 * Returns the current date for the datepicker or <code>null</code> if no date
		 * has been selected.<ul><li>This method does not accept any
		 * arguments.</li></ul>
		 */
		public function GetDate() {
			$this->CallJqUiMethod(false, "getDate");
		}
		/**
		 * Close a previously opened date picker.<ul><li>This method does not accept
		 * any arguments.</li></ul>
		 */
		public function Hide() {
			$this->CallJqUiMethod(false, "hide");
		}
		/**
		 * Determine whether a date picker has been disabled.<ul><li>This method does
		 * not accept any arguments.</li></ul>
		 */
		public function IsDisabled() {
			$this->CallJqUiMethod(false, "isDisabled");
		}
		/**
		 * <p>Gets the value currently associated with the specified
		 * <code>optionName</code>.</p> 			<p><strong>Note:</strong> For options that
		 * have objects as their value, you can get the value of a specific key by
		 * using dot notation. For example, <code>&quot;foo.bar&quot;</code> would get
		 * the value of the <code>bar</code> property on the <code>foo</code>
		 * option.</p><ul><li><strong>optionName</strong> Type: <a>String</a> The name
		 * of the option to get.</li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod(false, "option", $optionName);
		}
		/**
		 * Gets an object containing key/value pairs representing the current
		 * datepicker options hash.<ul><li>This signature does not accept any
		 * arguments.</li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod(false, "option");
		}
		/**
		 * <p>Sets the value of the datepicker option associated with the specified
		 * <code>optionName</code>.</p> 			<p><strong>Note:</strong> For options that
		 * have objects as their value, you can set the value of just one property by
		 * using dot notation for <code>optionName</code>. For example,
		 * <code>&quot;foo.bar&quot;</code> would update only the <code>bar</code>
		 * property of the <code>foo</code>
		 * option.</p><ul><li><strong>optionName</strong> Type: <a>String</a> The name
		 * of the option to set.</li> <li><strong>value</strong> Type: <a>Object</a> A
		 * value to set for the option.</li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod(false, "option", $optionName, $value);
		}
		/**
		 * Sets one or more options for the
		 * datepicker.<ul><li><strong>options</strong> Type: <a>Object</a> A map of
		 * option-value pairs to set.</li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod(false, "option", $options);
		}
		/**
		 * Redraw the date picker, after having made some external
		 * modifications.<ul><li>This method does not accept any arguments.</li></ul>
		 */
		public function Refresh() {
			$this->CallJqUiMethod(false, "refresh");
		}
		/**
		 * Sets the date for the datepicker. The new date may be a <code>Date</code>
		 * object or a string in the current <a>date format</a> (e.g.,
		 * <code>&quot;01/26/2009&quot;</code>), a number of days from today (e.g.,
		 * <code>+7</code>) or a string of values and periods
		 * (<code>&quot;y&quot;</code> for years, <code>&quot;m&quot;</code> for
		 * months, <code>&quot;w&quot;</code> for weeks, <code>&quot;d&quot;</code>
		 * for days, e.g., <code>&quot;+1m +7d&quot;</code>), or <code>null</code> to
		 * clear the selected date.<ul><li><strong>date</strong> Type: <a>String</a>
		 * or <a>Date</a> The new date.</li></ul>
		 * @param $date
		 */
		public function SetDate($date) {
			$this->CallJqUiMethod(false, "setDate", $date);
		}
		/**
		 * Open the date picker. If the datepicker is attached to an input, the input
		 * must be visible for the datepicker to be shown.<ul><li>This method does not
		 * accept any arguments.</li></ul>
		 */
		public function Show() {
			$this->CallJqUiMethod(false, "show");
		}

		/**
		 * PHP magic method
		 *
		 * @param string $strName Property name
		 *
		 * @return mixed|string
		 * @throws Exception|QCallerException
		 */
		public function __get($strName) {
			switch ($strName) {
				case 'AltField': return $this->mixAltField;
				case 'AltFormat': return $this->strAltFormat;
				case 'AppendText': return $this->strAppendText;
				case 'AutoSize': return $this->blnAutoSize;
				case 'OnBeforeShow': return $this->mixOnBeforeShow;
				case 'OnBeforeShowDay': return $this->mixOnBeforeShowDay;
				case 'ButtonImage': return $this->strButtonImage;
				case 'ButtonImageOnly': return $this->blnButtonImageOnly;
				case 'ButtonText': return $this->strButtonText;
				case 'OnCalculateWeek': return $this->mixOnCalculateWeek;
				case 'ChangeMonth': return $this->blnChangeMonth;
				case 'ChangeYear': return $this->blnChangeYear;
				case 'CloseText': return $this->strCloseText;
				case 'ConstrainInput': return $this->blnConstrainInput;
				case 'CurrentText': return $this->strCurrentText;
				case 'JqDateFormat': return $this->strJqDateFormat;
				case 'DayNames': return $this->arrDayNames;
				case 'DayNamesMin': return $this->arrDayNamesMin;
				case 'DayNamesShort': return $this->arrDayNamesShort;
				case 'DefaultDate': return $this->mixDefaultDate;
				case 'Duration': return $this->mixDuration;
				case 'FirstDay': return $this->intFirstDay;
				case 'GotoCurrent': return $this->blnGotoCurrent;
				case 'HideIfNoPrevNext': return $this->blnHideIfNoPrevNext;
				case 'IsRTL': return $this->blnIsRTL;
				case 'MaxDate': return $this->mixMaxDate;
				case 'MinDate': return $this->mixMinDate;
				case 'MonthNames': return $this->arrMonthNames;
				case 'MonthNamesShort': return $this->arrMonthNamesShort;
				case 'NavigationAsDateFormat': return $this->blnNavigationAsDateFormat;
				case 'NextText': return $this->strNextText;
				case 'NumberOfMonths': return $this->mixNumberOfMonths;
				case 'OnChangeMonthYear': return $this->mixOnChangeMonthYear;
				case 'OnClose': return $this->mixOnClose;
				case 'OnSelect': return $this->mixOnSelect;
				case 'PrevText': return $this->strPrevText;
				case 'SelectOtherMonths': return $this->blnSelectOtherMonths;
				case 'ShortYearCutoff': return $this->mixShortYearCutoff;
				case 'ShowAnim': return $this->strShowAnim;
				case 'ShowButtonPanel': return $this->blnShowButtonPanel;
				case 'ShowCurrentAtPos': return $this->intShowCurrentAtPos;
				case 'ShowMonthAfterYear': return $this->blnShowMonthAfterYear;
				case 'ShowOn': return $this->strShowOn;
				case 'ShowOptions': return $this->mixShowOptions;
				case 'ShowOtherMonths': return $this->blnShowOtherMonths;
				case 'ShowWeek': return $this->blnShowWeek;
				case 'StepMonths': return $this->intStepMonths;
				case 'WeekHeader': return $this->strWeekHeader;
				case 'YearRange': return $this->strYearRange;
				case 'YearSuffix': return $this->strYearSuffix;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		/**
		 * PHP magic method
		 *
		 * @param string $strName  Property name
		 * @param string $mixValue Property value
		 *
		 * @return mixed|void
		 * @throws Exception|QCallerException|QInvalidCastException
		 */
		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'AltField':
					$this->mixAltField = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'altField', $mixValue);
					}
					break;

				case 'AltFormat':
					try {
						$this->strAltFormat = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'altFormat', $this->strAltFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AppendText':
					try {
						$this->strAppendText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'appendText', $this->strAppendText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AutoSize':
					try {
						$this->blnAutoSize = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'autoSize', $this->blnAutoSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnBeforeShow':
					try {
						$this->mixOnBeforeShow = new QJsClosure($mixValue, array("input","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnBeforeShowDay':
					try {
						$this->mixOnBeforeShowDay = new QJsClosure($mixValue, array("date"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ButtonImage':
					try {
						$this->strButtonImage = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'buttonImage', $this->strButtonImage);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ButtonImageOnly':
					try {
						$this->blnButtonImageOnly = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'buttonImageOnly', $this->blnButtonImageOnly);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ButtonText':
					try {
						$this->strButtonText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'buttonText', $this->strButtonText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnCalculateWeek':
					try {
						$this->mixOnCalculateWeek = new QJsClosure($mixValue, array(""));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ChangeMonth':
					try {
						$this->blnChangeMonth = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'changeMonth', $this->blnChangeMonth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ChangeYear':
					try {
						$this->blnChangeYear = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'changeYear', $this->blnChangeYear);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CloseText':
					try {
						$this->strCloseText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'closeText', $this->strCloseText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ConstrainInput':
					try {
						$this->blnConstrainInput = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'constrainInput', $this->blnConstrainInput);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CurrentText':
					try {
						$this->strCurrentText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'currentText', $this->strCurrentText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'JqDateFormat':
					try {
						$this->strJqDateFormat = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'dateFormat', $this->strJqDateFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DayNames':
					try {
						$this->arrDayNames = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'dayNames', $this->arrDayNames);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DayNamesMin':
					try {
						$this->arrDayNamesMin = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'dayNamesMin', $this->arrDayNamesMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DayNamesShort':
					try {
						$this->arrDayNamesShort = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'dayNamesShort', $this->arrDayNamesShort);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DefaultDate':
					$this->mixDefaultDate = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'defaultDate', $mixValue);
					}
					break;

				case 'Duration':
					$this->mixDuration = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'duration', $mixValue);
					}
					break;

				case 'FirstDay':
					try {
						$this->intFirstDay = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'firstDay', $this->intFirstDay);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'GotoCurrent':
					try {
						$this->blnGotoCurrent = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'gotoCurrent', $this->blnGotoCurrent);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HideIfNoPrevNext':
					try {
						$this->blnHideIfNoPrevNext = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'hideIfNoPrevNext', $this->blnHideIfNoPrevNext);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'IsRTL':
					try {
						$this->blnIsRTL = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'isRTL', $this->blnIsRTL);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxDate':
					$this->mixMaxDate = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'maxDate', $mixValue);
					}
					break;

				case 'MinDate':
					$this->mixMinDate = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'minDate', $mixValue);
					}
					break;

				case 'MonthNames':
					try {
						$this->arrMonthNames = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'monthNames', $this->arrMonthNames);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MonthNamesShort':
					try {
						$this->arrMonthNamesShort = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'monthNamesShort', $this->arrMonthNamesShort);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NavigationAsDateFormat':
					try {
						$this->blnNavigationAsDateFormat = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'navigationAsDateFormat', $this->blnNavigationAsDateFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NextText':
					try {
						$this->strNextText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'nextText', $this->strNextText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NumberOfMonths':
					$this->mixNumberOfMonths = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'numberOfMonths', $mixValue);
					}
					break;

				case 'OnChangeMonthYear':
					try {
						$this->mixOnChangeMonthYear = new QJsClosure($mixValue, array("year","month","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnClose':
					try {
						$this->mixOnClose = new QJsClosure($mixValue, array("dateText","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnSelect':
					try {
						$this->mixOnSelect = new QJsClosure($mixValue, array("dateText","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PrevText':
					try {
						$this->strPrevText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'prevText', $this->strPrevText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SelectOtherMonths':
					try {
						$this->blnSelectOtherMonths = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'selectOtherMonths', $this->blnSelectOtherMonths);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShortYearCutoff':
					$this->mixShortYearCutoff = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'shortYearCutoff', $mixValue);
					}
					break;

				case 'ShowAnim':
					try {
						$this->strShowAnim = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showAnim', $this->strShowAnim);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowButtonPanel':
					try {
						$this->blnShowButtonPanel = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showButtonPanel', $this->blnShowButtonPanel);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowCurrentAtPos':
					try {
						$this->intShowCurrentAtPos = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showCurrentAtPos', $this->intShowCurrentAtPos);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMonthAfterYear':
					try {
						$this->blnShowMonthAfterYear = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showMonthAfterYear', $this->blnShowMonthAfterYear);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowOn':
					try {
						$this->strShowOn = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showOn', $this->strShowOn);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowOptions':
					$this->mixShowOptions = $mixValue;
				
					if ($this->OnPage) {
						$this->CallJqUiMethod(true, 'option', 'showOptions', $mixValue);
					}
					break;

				case 'ShowOtherMonths':
					try {
						$this->blnShowOtherMonths = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showOtherMonths', $this->blnShowOtherMonths);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowWeek':
					try {
						$this->blnShowWeek = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showWeek', $this->blnShowWeek);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMonths':
					try {
						$this->intStepMonths = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'stepMonths', $this->intStepMonths);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'WeekHeader':
					try {
						$this->strWeekHeader = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'weekHeader', $this->strWeekHeader);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'YearRange':
					try {
						$this->strYearRange = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'yearRange', $this->strYearRange);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'YearSuffix':
					try {
						$this->strYearSuffix = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'yearSuffix', $this->strYearSuffix);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}

		/**
		* If this control is attachable to a codegenerated control in a metacontrol, this function will be
		* used by the metacontrol designer dialog to display a list of options for the control.
		* @return QMetaParam[]
		**/
		public static function GetMetaParams() {
			return array_merge(parent::GetMetaParams(), array(
				new QMetaParam (get_called_class(), 'AltFormat', 'The <a><code>dateFormat</code></a> to be used for the <a><code>altField</code></a> option. This allows one date format to be shown to the user for selection purposes, while a different format is actually sent behind the scenes. For a full list of the possible formats see the <a><code>formatDate</code></a> function', QType::String),
				new QMetaParam (get_called_class(), 'AppendText', 'The text to display after each date field, e.g., to show the required format.', QType::String),
				new QMetaParam (get_called_class(), 'AutoSize', 'Set to <code>true</code> to automatically resize the input field to accommodate dates in the current <a><code>dateFormat</code></a>.', QType::Boolean),
				new QMetaParam (get_called_class(), 'OnBeforeShow', '<strong>Default:</strong><code>null</code>A function that takes an input field and current datepicker instance and returns an options object to update the datepicker with. It is called just before the datepicker is displayed.', 'QJsClosure'),
				new QMetaParam (get_called_class(), 'OnBeforeShowDay', '<strong>Default:</strong><code>null</code>A function that takes a date as a parameter and must return an array with: 				<ul><li><code>[0]</code>: <code>true</code>/<code>false</code> indicating whether or not this date is selectable</li> 					<li><code>[1]</code>: a CSS class name to add to the date&apos;s cell or <code>&quot;&quot;</code> for the default presentation</li> 					<li><code>[2]</code>: an optional popup tooltip for this date</li></ul> 				The function is called for each day in the datepicker before it is displayed.', 'QJsClosure'),
				new QMetaParam (get_called_class(), 'ButtonImage', 'A URL of an image to use to display the datepicker when the <a><code>showOn</code></a> option is set to <code>&quot;button&quot;</code> or <code>&quot;both&quot;</code>. If set, the <a><code>buttonText</code></a> option becomes the <code>alt</code> value and is not directly displayed.', QType::String),
				new QMetaParam (get_called_class(), 'ButtonImageOnly', 'Whether the button image should be rendered by itself instead of inside a button element. This option is only relevant if the <a><code>buttonImage</code></a> option has also been set.', QType::Boolean),
				new QMetaParam (get_called_class(), 'ButtonText', 'The text to display on the trigger button. Use in conjunction with the <a><code>showOn</code></a> option set to <code>&quot;button&quot;</code> or <code>&quot;both&quot;</code>.', QType::String),
				new QMetaParam (get_called_class(), 'OnCalculateWeek', '<strong>Default:</strong><code>jQuery.datepicker.iso8601Week</code>A function to calculate the week of the year for a given date. The default implementation uses the ISO 8601 definition: weeks start on a Monday; the first week of the year contains the first Thursday of the year.', 'QJsClosure'),
				new QMetaParam (get_called_class(), 'ChangeMonth', 'Whether the month should be rendered as a dropdown instead of text.', QType::Boolean),
				new QMetaParam (get_called_class(), 'ChangeYear', 'Whether the year should be rendered as a dropdown instead of text. Use the <a><code>yearRange</code></a> option to control which years are made available for selection.', QType::Boolean),
				new QMetaParam (get_called_class(), 'CloseText', 'The text to display for the close link. Use the <a><code>showButtonPanel</code></a> option to display this button.', QType::String),
				new QMetaParam (get_called_class(), 'ConstrainInput', 'When <code>true</code>, entry in the input field is constrained to those characters allowed by the current <a><code>dateFormat</code></a> option.', QType::Boolean),
				new QMetaParam (get_called_class(), 'CurrentText', 'The text to display for the current day link. Use the <a><code>showButtonPanel</code></a> option to display this button.', QType::String),
				new QMetaParam (get_called_class(), 'JqDateFormat', 'The format for parsed and displayed dates. For a full list of the possible formats see the <code><a><code>formatDate</code></a></code> function.', QType::String),
				new QMetaParam (get_called_class(), 'DayNames', 'The list of long day names, starting from Sunday, for use as requested via the <a><code>dateFormat</code></a> option.', QType::ArrayType),
				new QMetaParam (get_called_class(), 'DayNamesMin', 'The list of minimised day names, starting from Sunday, for use as column headers within the datepicker.', QType::ArrayType),
				new QMetaParam (get_called_class(), 'DayNamesShort', 'The list of abbreviated day names, starting from Sunday, for use as requested via the <a><code>dateFormat</code></a> option.', QType::ArrayType),
				new QMetaParam (get_called_class(), 'FirstDay', 'Set the first day of the week: Sunday is <code>0</code>, Monday is <code>1</code>, etc.', QType::Integer),
				new QMetaParam (get_called_class(), 'GotoCurrent', 'When <code>true</code>, the current day link moves to the currently selected date instead of today.', QType::Boolean),
				new QMetaParam (get_called_class(), 'HideIfNoPrevNext', 'Normally the previous and next links are disabled when not applicable (see the <a><code>minDate</code></a> and <a><code>maxDate</code></a> options). You can hide them altogether by setting this attribute to <code>true</code>.', QType::Boolean),
				new QMetaParam (get_called_class(), 'IsRTL', 'Whether the current language is drawn from right to left.', QType::Boolean),
				new QMetaParam (get_called_class(), 'MonthNames', 'The list of full month names, for use as requested via the <a><code>dateFormat</code></a> option.', QType::ArrayType),
				new QMetaParam (get_called_class(), 'MonthNamesShort', 'The list of abbreviated month names, as used in the month header on each datepicker and as requested via the <a><code>dateFormat</code></a> option.', QType::ArrayType),
				new QMetaParam (get_called_class(), 'NavigationAsDateFormat', 'Whether the <a><code>prevText</code></a> and <a><code>nextText</code></a> options should be parsed as dates by the <code><a><code>formatDate</code></a></code> function, allowing them to display the target month names for example.', QType::Boolean),
				new QMetaParam (get_called_class(), 'NextText', 'The text to display for the next month link. With the standard ThemeRoller styling, this value is replaced by an icon.', QType::String),
				new QMetaParam (get_called_class(), 'OnChangeMonthYear', '<strong>Default:</strong><code>null</code>Called when the datepicker moves to a new month and/or year. The function receives the selected year, month (1-12), and the datepicker instance as parameters. <code>this</code> refers to the associated input field.', 'QJsClosure'),
				new QMetaParam (get_called_class(), 'OnClose', '<strong>Default:</strong><code>null</code>Called when the datepicker is closed, whether or not a date is selected. The function receives the selected date as text (<code>&quot;&quot;</code> if none) and the datepicker instance as parameters. <code>this</code> refers to the associated input field.', 'QJsClosure'),
				new QMetaParam (get_called_class(), 'OnSelect', '<strong>Default:</strong><code>null</code>Called when the datepicker is selected. The function receives the selected date as text and the datepicker instance as parameters. <code>this</code> refers to the associated input field.', 'QJsClosure'),
				new QMetaParam (get_called_class(), 'PrevText', 'The text to display for the previous month link. With the standard ThemeRoller styling, this value is replaced by an icon.', QType::String),
				new QMetaParam (get_called_class(), 'SelectOtherMonths', 'Whether days in other months shown before or after the current month are selectable. This only applies if the <a><code>showOtherMonths</code></a> option is set to <code>true</code>.', QType::Boolean),
				new QMetaParam (get_called_class(), 'ShowAnim', 'The name of the animation used to show and hide the datepicker. Use <code>&quot;show&quot;</code> (the default), <code>&quot;slideDown&quot;</code>, <code>&quot;fadeIn&quot;</code>, any of the <a>jQuery UI effects</a>. Set to an empty string to disable animation.', QType::String),
				new QMetaParam (get_called_class(), 'ShowButtonPanel', 'Whether to display a button pane underneath the calendar. The button pane contains two buttons, a Today button that links to the current day, and a Done button that closes the datepicker. The buttons&apos; text can be customized using the <a><code>currentText</code></a> and <a><code>closeText</code></a> options respectively.', QType::Boolean),
				new QMetaParam (get_called_class(), 'ShowCurrentAtPos', 'When displaying multiple months via the <a><code>numberOfMonths</code></a> option, the <code>showCurrentAtPos</code> option defines which position to display the current month in.', QType::Integer),
				new QMetaParam (get_called_class(), 'ShowMonthAfterYear', 'Whether to show the month after the year in the header.', QType::Boolean),
				new QMetaParam (get_called_class(), 'ShowOn', 'When the datepicker should appear. The datepicker can appear when the field receives focus (<code>&quot;focus&quot;</code>), when a button is clicked (<code>&quot;button&quot;</code>), or when either event occurs (<code>&quot;both&quot;</code>).', QType::String),
				new QMetaParam (get_called_class(), 'ShowOtherMonths', 'Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the <a><code>selectOtherMonths</code></a> option.', QType::Boolean),
				new QMetaParam (get_called_class(), 'ShowWeek', 'When <code>true</code>, a column is added to show the week of the year. The <a><code>calculateWeek</code></a> option determines how the week of the year is calculated. You may also want to change the <a><code>firstDay</code></a> option.', QType::Boolean),
				new QMetaParam (get_called_class(), 'StepMonths', 'Set how many months to move when clicking the previous/next links.', QType::Integer),
				new QMetaParam (get_called_class(), 'WeekHeader', 'The text to display for the week of the year column heading. Use the <a><code>showWeek</code></a> option to display this column.', QType::String),
				new QMetaParam (get_called_class(), 'YearRange', 'The range of years displayed in the year drop-down: either relative to today&apos;s year (<code>&quot;-nn:+nn&quot;</code>), relative to the currently selected year (<code>&quot;c-nn:c+nn&quot;</code>), absolute (<code>&quot;nnnn:nnnn&quot;</code>), or combinations of these formats (<code>&quot;nnnn:-nn&quot;</code>). Note that this option only affects what appears in the drop-down, to restrict which dates may be selected use the <a><code>minDate</code></a> and/or <a><code>maxDate</code></a> options.', QType::String),
				new QMetaParam (get_called_class(), 'YearSuffix', 'Additional text to display after the year in the month headers.', QType::String),
			));
		}
	}

?>
