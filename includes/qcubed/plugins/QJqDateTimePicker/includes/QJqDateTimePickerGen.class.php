<?php
	/**
	 * The abstract QJqDateTimePickerGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QJqDateTimePickerBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QJqDateTimePicker class file.
	 *
	 */

	/* Custom event classes for this control */
	
	

	/* Custom "property" event classes for this control */
	/**
	 * null
	 */
	class QJqDateTimePicker_beforeShowEvent extends QJqUiPropertyEvent {
		const EventName = 'QJqDateTimePicker_beforeShow';
		protected $strJqProperty = 'beforeShow';
	}

	/**
	 * null
	 */
	class QJqDateTimePicker_ChangeMonthYearEvent extends QJqUiPropertyEvent {
		const EventName = 'QJqDateTimePicker_ChangeMonthYear';
		protected $strJqProperty = 'onChangeMonthYear';
	}

	/**
	 * null
	 */
	class QJqDateTimePicker_CloseEvent extends QJqUiPropertyEvent {
		const EventName = 'QJqDateTimePicker_Close';
		protected $strJqProperty = 'onClose';
	}


	/**
	 * @property boolean $AlwaysSetTime 
	 * @property boolean $Ampm 
	 * @property integer $Hour 
	 * @property integer $HourMin 
	 * @property integer $HourMax 
	 * @property integer $HourGrid 
	 * @property integer $Minute 
	 * @property integer $MinuteMin 
	 * @property integer $MinuteMax 
	 * @property integer $MinuteGrid 
	 * @property integer $Second 
	 * @property integer $SecondMin 
	 * @property integer $SecondMax 
	 * @property integer $SecondGrid 
	 * @property integer $Millisec 
	 * @property integer $MillisecMin 
	 * @property integer $MillisecMax 
	 * @property integer $MillisecGrid 
	 * @property boolean $ShowButtonPanel 
	 * @property boolean $ShowHour 
	 * @property boolean $ShowMinute 
	 * @property boolean $ShowSecond 
	 * @property boolean $ShowMillisec 
	 * @property boolean $ShowTimezone 
	 * @property boolean $ShowTime 
	 * @property integer $StepHour 
	 * @property integer $StepMinute 
	 * @property integer $StepSecond 
	 * @property integer $StepMillisec 
	 * @property string $JqTimeFormat 
	 * @property boolean $TimeOnly 
	 * @property string $Separator 
	 * @property boolean $AltFieldTimeOnly 
	 * @property boolean $ShowTimepicker 
	 * @property string $Timezone 
	 * @property boolean $TimezoneIso8609 
	 * @property array $TimezoneList 
	 * @property boolean $AddSliderAccess 
	 * @property mixed $SliderAccessArgs 
	 * @property QJsClosure $BeforeShow null
	 * @property QJsClosure $OnChangeMonthYear null
	 * @property QJsClosure $OnClose null
	 */

	class QJqDateTimePickerGen extends QDatepickerBox	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var boolean */
		protected $blnAlwaysSetTime = null;
		/** @var boolean */
		protected $blnAmpm = null;
		/** @var integer */
		protected $intHour;
		/** @var integer */
		protected $intHourMin;
		/** @var integer */
		protected $intHourMax = null;
		/** @var integer */
		protected $intHourGrid;
		/** @var integer */
		protected $intMinute;
		/** @var integer */
		protected $intMinuteMin;
		/** @var integer */
		protected $intMinuteMax = null;
		/** @var integer */
		protected $intMinuteGrid;
		/** @var integer */
		protected $intSecond;
		/** @var integer */
		protected $intSecondMin;
		/** @var integer */
		protected $intSecondMax = null;
		/** @var integer */
		protected $intSecondGrid;
		/** @var integer */
		protected $intMillisec;
		/** @var integer */
		protected $intMillisecMin;
		/** @var integer */
		protected $intMillisecMax = null;
		/** @var integer */
		protected $intMillisecGrid;
		/** @var boolean */
		protected $blnShowButtonPanel = null;
		/** @var boolean */
		protected $blnShowHour = null;
		/** @var boolean */
		protected $blnShowMinute = null;
		/** @var boolean */
		protected $blnShowSecond = null;
		/** @var boolean */
		protected $blnShowMillisec = null;
		/** @var boolean */
		protected $blnShowTimezone = null;
		/** @var boolean */
		protected $blnShowTime = null;
		/** @var integer */
		protected $intStepHour = null;
		/** @var integer */
		protected $intStepMinute = null;
		/** @var integer */
		protected $intStepSecond = null;
		/** @var integer */
		protected $intStepMillisec = null;
		/** @var string */
		protected $strJqTimeFormat;
		/** @var boolean */
		protected $blnTimeOnly = null;
		/** @var string */
		protected $strSeparator;
		/** @var boolean */
		protected $blnAltFieldTimeOnly = null;
		/** @var boolean */
		protected $blnShowTimepicker = null;
		/** @var string */
		protected $strTimezone = null;
		/** @var boolean */
		protected $blnTimezoneIso8609 = null;
		/** @var array */
		protected $arrTimezoneList = null;
		/** @var boolean */
		protected $blnAddSliderAccess = null;
		/** @var mixed */
		protected $mixSliderAccessArgs = null;
		/** @var QJsClosure */
		protected $mixBeforeShow = null;
		/** @var QJsClosure */
		protected $mixOnChangeMonthYear = null;
		/** @var QJsClosure */
		protected $mixOnClose = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = parent::makeJqOptions();
			if ($strJqOptions) $strJqOptions .= ', ';
			$strJqOptions .= $this->makeJsProperty('AlwaysSetTime', 'alwaysSetTime');
			$strJqOptions .= $this->makeJsProperty('Ampm', 'ampm');
			$strJqOptions .= $this->makeJsProperty('Hour', 'hour');
			$strJqOptions .= $this->makeJsProperty('HourMin', 'hourMin');
			$strJqOptions .= $this->makeJsProperty('HourMax', 'hourMax');
			$strJqOptions .= $this->makeJsProperty('HourGrid', 'hourGrid');
			$strJqOptions .= $this->makeJsProperty('Minute', 'minute');
			$strJqOptions .= $this->makeJsProperty('MinuteMin', 'minuteMin');
			$strJqOptions .= $this->makeJsProperty('MinuteMax', 'minuteMax');
			$strJqOptions .= $this->makeJsProperty('MinuteGrid', 'minuteGrid');
			$strJqOptions .= $this->makeJsProperty('Second', 'second');
			$strJqOptions .= $this->makeJsProperty('SecondMin', 'secondMin');
			$strJqOptions .= $this->makeJsProperty('SecondMax', 'secondMax');
			$strJqOptions .= $this->makeJsProperty('SecondGrid', 'secondGrid');
			$strJqOptions .= $this->makeJsProperty('Millisec', 'millisec');
			$strJqOptions .= $this->makeJsProperty('MillisecMin', 'millisecMin');
			$strJqOptions .= $this->makeJsProperty('MillisecMax', 'millisecMax');
			$strJqOptions .= $this->makeJsProperty('MillisecGrid', 'millisecGrid');
			$strJqOptions .= $this->makeJsProperty('ShowButtonPanel', 'showButtonPanel');
			$strJqOptions .= $this->makeJsProperty('ShowHour', 'showHour');
			$strJqOptions .= $this->makeJsProperty('ShowMinute', 'showMinute');
			$strJqOptions .= $this->makeJsProperty('ShowSecond', 'showSecond');
			$strJqOptions .= $this->makeJsProperty('ShowMillisec', 'showMillisec');
			$strJqOptions .= $this->makeJsProperty('ShowTimezone', 'showTimezone');
			$strJqOptions .= $this->makeJsProperty('ShowTime', 'showTime');
			$strJqOptions .= $this->makeJsProperty('StepHour', 'stepHour');
			$strJqOptions .= $this->makeJsProperty('StepMinute', 'stepMinute');
			$strJqOptions .= $this->makeJsProperty('StepSecond', 'stepSecond');
			$strJqOptions .= $this->makeJsProperty('StepMillisec', 'stepMillisec');
			$strJqOptions .= $this->makeJsProperty('JqTimeFormat', 'timeFormat');
			$strJqOptions .= $this->makeJsProperty('TimeOnly', 'timeOnly');
			$strJqOptions .= $this->makeJsProperty('Separator', 'separator');
			$strJqOptions .= $this->makeJsProperty('AltFieldTimeOnly', 'altFieldTimeOnly');
			$strJqOptions .= $this->makeJsProperty('ShowTimepicker', 'showTimepicker');
			$strJqOptions .= $this->makeJsProperty('Timezone', 'timezone');
			$strJqOptions .= $this->makeJsProperty('TimezoneIso8609', 'timezoneIso8609');
			$strJqOptions .= $this->makeJsProperty('TimezoneList', 'timezoneList');
			$strJqOptions .= $this->makeJsProperty('AddSliderAccess', 'addSliderAccess');
			$strJqOptions .= $this->makeJsProperty('SliderAccessArgs', 'sliderAccessArgs');
			$strJqOptions .= $this->makeJsProperty('BeforeShow', 'beforeShow');
			$strJqOptions .= $this->makeJsProperty('OnChangeMonthYear', 'onChangeMonthYear');
			$strJqOptions .= $this->makeJsProperty('OnClose', 'onClose');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'datetimepicker';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			return  $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}




		public function __get($strName) {
			switch ($strName) {
				case 'AlwaysSetTime': return $this->blnAlwaysSetTime;
				case 'Ampm': return $this->blnAmpm;
				case 'Hour': return $this->intHour;
				case 'HourMin': return $this->intHourMin;
				case 'HourMax': return $this->intHourMax;
				case 'HourGrid': return $this->intHourGrid;
				case 'Minute': return $this->intMinute;
				case 'MinuteMin': return $this->intMinuteMin;
				case 'MinuteMax': return $this->intMinuteMax;
				case 'MinuteGrid': return $this->intMinuteGrid;
				case 'Second': return $this->intSecond;
				case 'SecondMin': return $this->intSecondMin;
				case 'SecondMax': return $this->intSecondMax;
				case 'SecondGrid': return $this->intSecondGrid;
				case 'Millisec': return $this->intMillisec;
				case 'MillisecMin': return $this->intMillisecMin;
				case 'MillisecMax': return $this->intMillisecMax;
				case 'MillisecGrid': return $this->intMillisecGrid;
				case 'ShowButtonPanel': return $this->blnShowButtonPanel;
				case 'ShowHour': return $this->blnShowHour;
				case 'ShowMinute': return $this->blnShowMinute;
				case 'ShowSecond': return $this->blnShowSecond;
				case 'ShowMillisec': return $this->blnShowMillisec;
				case 'ShowTimezone': return $this->blnShowTimezone;
				case 'ShowTime': return $this->blnShowTime;
				case 'StepHour': return $this->intStepHour;
				case 'StepMinute': return $this->intStepMinute;
				case 'StepSecond': return $this->intStepSecond;
				case 'StepMillisec': return $this->intStepMillisec;
				case 'JqTimeFormat': return $this->strJqTimeFormat;
				case 'TimeOnly': return $this->blnTimeOnly;
				case 'Separator': return $this->strSeparator;
				case 'AltFieldTimeOnly': return $this->blnAltFieldTimeOnly;
				case 'ShowTimepicker': return $this->blnShowTimepicker;
				case 'Timezone': return $this->strTimezone;
				case 'TimezoneIso8609': return $this->blnTimezoneIso8609;
				case 'TimezoneList': return $this->arrTimezoneList;
				case 'AddSliderAccess': return $this->blnAddSliderAccess;
				case 'SliderAccessArgs': return $this->mixSliderAccessArgs;
				case 'BeforeShow': return $this->mixBeforeShow;
				case 'OnChangeMonthYear': return $this->mixOnChangeMonthYear;
				case 'OnClose': return $this->mixOnClose;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'AlwaysSetTime':
					try {
						$this->blnAlwaysSetTime = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'alwaysSetTime', $this->blnAlwaysSetTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Ampm':
					try {
						$this->blnAmpm = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'ampm', $this->blnAmpm);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Hour':
					try {
						$this->intHour = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'hour', $this->intHour);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourMin':
					try {
						$this->intHourMin = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'hourMin', $this->intHourMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourMax':
					try {
						$this->intHourMax = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'hourMax', $this->intHourMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourGrid':
					try {
						$this->intHourGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'hourGrid', $this->intHourGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Minute':
					try {
						$this->intMinute = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minute', $this->intMinute);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteMin':
					try {
						$this->intMinuteMin = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minuteMin', $this->intMinuteMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteMax':
					try {
						$this->intMinuteMax = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minuteMax', $this->intMinuteMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteGrid':
					try {
						$this->intMinuteGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minuteGrid', $this->intMinuteGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Second':
					try {
						$this->intSecond = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'second', $this->intSecond);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondMin':
					try {
						$this->intSecondMin = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'secondMin', $this->intSecondMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondMax':
					try {
						$this->intSecondMax = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'secondMax', $this->intSecondMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondGrid':
					try {
						$this->intSecondGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'secondGrid', $this->intSecondGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Millisec':
					try {
						$this->intMillisec = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'millisec', $this->intMillisec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecMin':
					try {
						$this->intMillisecMin = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'millisecMin', $this->intMillisecMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecMax':
					try {
						$this->intMillisecMax = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'millisecMax', $this->intMillisecMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecGrid':
					try {
						$this->intMillisecGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'millisecGrid', $this->intMillisecGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowButtonPanel':
					try {
						$this->blnShowButtonPanel = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showButtonPanel', $this->blnShowButtonPanel);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowHour':
					try {
						$this->blnShowHour = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showHour', $this->blnShowHour);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMinute':
					try {
						$this->blnShowMinute = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showMinute', $this->blnShowMinute);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowSecond':
					try {
						$this->blnShowSecond = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showSecond', $this->blnShowSecond);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMillisec':
					try {
						$this->blnShowMillisec = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showMillisec', $this->blnShowMillisec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowTimezone':
					try {
						$this->blnShowTimezone = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showTimezone', $this->blnShowTimezone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowTime':
					try {
						$this->blnShowTime = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showTime', $this->blnShowTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepHour':
					try {
						$this->intStepHour = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stepHour', $this->intStepHour);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMinute':
					try {
						$this->intStepMinute = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stepMinute', $this->intStepMinute);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepSecond':
					try {
						$this->intStepSecond = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stepSecond', $this->intStepSecond);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMillisec':
					try {
						$this->intStepMillisec = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stepMillisec', $this->intStepMillisec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'JqTimeFormat':
					try {
						$this->strJqTimeFormat = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'timeFormat', $this->strJqTimeFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimeOnly':
					try {
						$this->blnTimeOnly = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'timeOnly', $this->blnTimeOnly);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Separator':
					try {
						$this->strSeparator = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'separator', $this->strSeparator);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AltFieldTimeOnly':
					try {
						$this->blnAltFieldTimeOnly = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'altFieldTimeOnly', $this->blnAltFieldTimeOnly);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowTimepicker':
					try {
						$this->blnShowTimepicker = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showTimepicker', $this->blnShowTimepicker);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Timezone':
					try {
						$this->strTimezone = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'timezone', $this->strTimezone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimezoneIso8609':
					try {
						$this->blnTimezoneIso8609 = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'timezoneIso8609', $this->blnTimezoneIso8609);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimezoneList':
					try {
						$this->arrTimezoneList = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'timezoneList', $this->arrTimezoneList);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AddSliderAccess':
					try {
						$this->blnAddSliderAccess = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'addSliderAccess', $this->blnAddSliderAccess);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SliderAccessArgs':
					$this->mixSliderAccessArgs = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'sliderAccessArgs', $mixValue);
					}
					break;

				case 'BeforeShow':
					try {
						$this->mixBeforeShow = new QJsClosure($mixValue, array("i","dp_inst","tp_inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnChangeMonthYear':
					try {
						$this->mixOnChangeMonthYear = new QJsClosure($mixValue, array("i","year","month","dp_inst","tp_inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnClose':
					try {
						$this->mixOnClose = new QJsClosure($mixValue, array("i","dateText","dp_inst","tp_inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
